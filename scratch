Redux-persist:

- We can store some information regarding the token renewal flow and persist the state in Redux using redux-persist.

Redux setup:
```
// store.js
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './reducers';

const store = configureStore({
  reducer: rootReducer,
});

export default store;
```

To add `redux-persist`:
```
// store.js
import { configureStore } from '@reduxjs/toolkit';
import { persistStore, persistReducer } from 'redux-persist';
import storage from 'redux-persist/lib/storage';
import rootReducer from './reducers';

const persistConfig = {
  key: 'root',
  storage,
};

const persistedReducer = persistReducer(persistConfig, rootReducer);

const store = configureStore({
  reducer: persistedReducer,
  // Other Redux Toolkit stuff
});

const persistor = persistStore(store);

export { store, persistor };
// We need to create a config -- basically tells redux-persist library what to store and where to store (local storage preferable)
// mostly just copied all of this from the redux-persist documentation. The gist of this change is we use a persistReducer and persistStore instead of regular store and reducer

```

You can also customize what to persist
```
// store.js
import storage from 'redux-persist/lib/storage/session';
// ...

const persistConfig = {
  key: 'root',
  storage,
  whitelist: ['step'], // Only save the 'step' part of the state
};

// ...
```

To add async things, you can use `PersistGate` component to show loading spinner etc
// if we are loading state and merging state between local and backend, then we need to use this
```
// App.js
import React from 'react';
import { Provider } from 'react-redux';
import { PersistGate } from 'redux-persist/integration/react';
import { store, persistor } from './store';
import MyComponent from './MyComponent';

const App = () => {
  return (
    <Provider store={store}>
      <PersistGate loading={null} persistor={persistor}>
        <MyComponent />
      </PersistGate>
    </Provider>
  );
};

export default App;
```

It is easy and lets you keep your state, but the tradeoff is that it is a bit more added complexity and you need to be careful with security (if we are storing user data etc in token renewal flow)
I think it also gets complicated if we are storing state in the backend and merging or resyncing the state, but we are not doing that so I don't think that is applicable for us.

My recommendation is:
-- If we are storing only the step state, we can use this, but it might be needlessly complicated
-- If we are storing additional data (like user etc), might be worth talking to security team to get approval to store the data
